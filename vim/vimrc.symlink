"-----------------------------------------------------------------
"
" rc for vim 7.3
"
" $Date: 2011-09-04T16:21:03+0900$
"
"-----------------------------------------------------------------

"-----------------------------------------------------------------
" for Win32
"-----------------------------------------------------------------

if has('win32')
    set runtimepath+=$HOME/.vim,$HOME/.vim/after
endif

"-----------------------------------------------------------------
" Vundle
"-----------------------------------------------------------------

set nocompatible
"filetype off
"set rtp+=~/.vim/bundle/vundle/
"call vundle#rc()
"" let Vundle manage Vundle
"Bundle 'gmarik/vundle'
"" 使用中のプラグイン
"Bundle 'Shougo/neocomplcache'
"Bundle 'Shogo/unite.vim'
"Bundle 'thinca/vim-ref'
"Bundle 'thinca/vim-quickrun'
"Bundle 'scrooloose/nerdcommenter'
"Bundle 'tpope/vim-surround'
"Bundle 'ZenCoding.vim'
filetype plugin indent on

"-----------------------------------------------------------------
" Basic
"-----------------------------------------------------------------

syntax on
let $LANG='ja'
set autoindent                  " 自動でインデント
set autoread                    " 他で書き換えられたら自動で読み直す
set clipboard+=unnamed          " ヤンクしたときに自動でクリップボードにコピー
set cindent                     " Cプログラムファイルの自動インデントを始める
set cursorline                  " カーソル行をハイライト
set display=uhex                " 印字不可能文字を16進数で表示
set enc=utf-8
set expandtab                   " Tab を空白に変換
set fenc=utf-8
set fencs=utf-8,iso-2022-jp,euc-jp,cp932
set ffs=unix,dos,mac
set fileformat=unix
set formatoptions+=mM           " 日本語の行の連結時には空白を入力しない
set formatoptions=lmoq          " テキスト整形オプション，マルチバイト系を追加
set hlsearch                    " 検索文字をハイライト
set hidden                      " 編集結果非保存のバッファから、新しいバッファを開くときに警告を出さない
set ignorecase                  " 検索時大文字小文字無視
set incsearch                   " インクリメンタルサーチ
set iminsert=0
set imsearch=0
set laststatus=2                "
set list                        " 不可視文字表示
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%  " 不可視文字の表示形式
set number                      " 行番号表示
set nobackup                    " バックアップ取らない
set noimcmdline
set noimdisable
set noswapfile                  " スワップファイル作らない
set nowritebackup               " set writebackupを指定してもオプション 'backup' がオンでない限り、バックアップは上書きに成功した後に削除される。
set nrformats-=octal            " 8進数を無効にする。<C-a>,<C-x>に影響する
set scrolloff=5                 " スクロール時の余白確保
set shiftwidth=2                " 自動で挿入されるインデント幅
set showmatch                   " 括弧の対応をハイライト
set showmode                    " 現在のモードを表示
set showcmd
set showtabline=2               "
set smartindent                 " 新しい行を開始したときに、新しい行のインデントを現在行と同じ量にする
set smarttab                    "
set smartcase                   " 検索文字列に大文字が含まれている場合は区別して検索する
set softtabstop=2               " Tab 押下時に挿入されるスペース数
" set tabstop=2                   " ファイル中のタブ文字の表示幅
set textwidth=0                 " 一行に長い文章を書いていても自動折り返しをしない
set timeoutlen=3500             " キーコードやマッピングされたキー列が完了するのを待つ時間(ミリ秒)
set vb t_vb=                    " ビープをならさない
set viminfo='50,<1000,s100,\"50 " viminfoファイルの設定
set virtualedit=block           " Visual blockモードでフリーカーソルを有効にする
set wildmenu                    " コマンド補完を強化
set wildchar=<tab>              " コマンド補完を開始するキー
set wildmode=list:full          " リスト表示，最長マッチ
set whichwrap=b,s,h,l,<,>,[,]   " カーソルを行頭、行末で止まらないようにする
set wrapscan                    " 最後まで検索したら先頭へ戻る

"-----------------------------------------------------------------
" keymap
"-----------------------------------------------------------------

"カーソルを表示行で移動する。論理行移動は<C-n>, <C-p>
nnoremap j gj
nnoremap k gk
" 0,  9で行頭、行末へ
nmap 1 0
nmap 0 ^
nmap 9 $
" ; でコマンド入力
noremap ; :
noremap : ;
" Ctrl-n, Ctrl-pでタブ移動
nnoremap <C-N> gt
nnoremap <C-P> gT
" Ctrl-hjkl でsplitウィンドウ移動
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
" , の後に自動的にスペースを挿入
inoremap , ,<space>
" esc 2回で検索ハイライトをクリア
nmap <esc><esc> ;nohlsearch<cr><esc>
" 日時挿入
inoremap <Leader>date <C-R>=strftime('%A,  %B %d,  %Y')<CR>
inoremap <Leader>time <C-R>=strftime('%H:%M')<CR>
inoremap <Leader>rdate <C-R>=strftime('%A,  %B %d,  %Y %H:%M')<CR>
inoremap <Leader>w3cdtf <C-R>=strftime('%Y-%m-%dT%H:%M:%S+09:00')<CR>
" reload .vimrc
nmap ,s :source ~/.vimrc<cr>
" edit .vimrc
nmap ,v :tabe ~/.vimrc<cr

"-----------------------------------------------------------------
" autocmd
"-----------------------------------------------------------------

" ファイルを開いたときに前回の編集箇所に移動
autocmd bufreadpost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
" 保存時に行末の空白を除去する
" autocmd bufwritepre * :%s/\s\+$//ge
" 保存時にtabをスペースに変換する
" autocmd bufwritepre * :%s/\t/  /ge

"-----------------------------------------------------------------
" Encording
"-----------------------------------------------------------------

" 文字コードの自動認識
if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconvがJISX0213に対応しているかをチェック
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" 改行コードの自動認識
set fileformats=unix,dos,mac
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

"-----------------------------------------------------------------
" color
"-----------------------------------------------------------------

" color
set t_co=256
set background=dark
colorscheme desert256
" カレントウィンドウにのみ罫線を引く
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END

" Highlight
highlight CursorLine ctermfg=NONE ctermbg=black guibg=black cterm=NONE
" タブの視覚化
highlight TagKey guibg=#b5d68f
match TagKey /  /
"ステータスラインに文字コードと改行文字を表示する
if winwidth(0) >= 120
  set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %F%=[%{GetB()}]\ %l,%c%V%8P
else
  set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %f%=[%{GetB()}]\ %l,%c%V%8P
endif
"入力モード時、ステータスラインのカラーを変更
augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END

function! GetB()
  let c = matchstr(getline('.'), '.', col('.') - 1)
  let c = iconv(c, &enc, &fenc)
  return String2Hex(c)
endfunction

func! Nr2Hex(nr)
  let n = a:nr
  let r = ""
  while n
    let r = '0123456789ABCDEF'[n % 16] . r
    let n = n / 16
  endwhile
  return r
endfunc

func! String2Hex(str)
  let out = ''
  let ix = 0
  while ix < strlen(a:str)
    let out = out . Nr2Hex(char2nr(a:str[ix]))
    let ix = ix + 1
  endwhile
  return out
endfunc

"-----------------------------------------------------------------
" Plugin
"-----------------------------------------------------------------

" Autodate
let g:autodate_format = ': %FT%T%z'
let g:autodate_keyword_pre = '$Date'
let g:autodate_keyword_post = '\$'
